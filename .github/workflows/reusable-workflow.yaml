name: Reusable Workflow

on:
  workflow_call:
    secrets:
      CLIENT_ID:
        required: true
      CLIENT_SECRET:
        required: true
      REALM:
        required: true

jobs:
  orchestration:
    runs-on: ubuntu-latest
    outputs: 
      tasks: ${{ steps.tasks.outputs.tasks }}
    steps:
      - name: Checkout repository content
        uses: actions/checkout@v3

      # - name: Get Token
      #   shell: bash
      #   run: |
      #     TOKEN_OUTPUT=$(curl --location --request POST \
      #     'https://idm.stackspot.com/realms/${{ secrets.REALM }}/protocol/openid-connect/token' \
      #     --header 'Content-Type: application/x-www-form-urlencoded' \
      #     --data-urlencode 'client_id=${{ secrets.CLIENT_ID }}' \
      #     --data-urlencode 'grant_type=client_credentials' \
      #     --data-urlencode 'client_secret=${{ secrets.CLIENT_SECRET }}')
        
      - name: Fetch Endpoint
        id: tasks
        shell: bash
        run: |
          # Would call Runtime API through curl: POST /run/deploy/app/self-hosted
          myArray=()
          TASKS=$(cat ${{ github.workspace }}/tasks.json | jq '.tasks')
          echo "TASKS: $TASKS"
          cat ${{ github.workspace }}/tasks.json | jq '.tasks' >> new.json
          cat ${{ github.workspace }}/new.json
          echo "* * * LOOP * * *"
          ${{ github.workspace }}/new.json | jq -r '.[].runTaskId' | while read id ; do
            echo "TASK ID: ${id}"
            myArray+=("${id}")
            echo "- - - - -"
          done
          myArray=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${myArray[@]}")
          echo "Updated tasks list: $myArray"
          echo "tasks=$myArray" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: [orchestration]
    strategy:
      matrix:
        task: ${{ fromJSON(needs.orchestration.outputs.tasks) }}
      fail-fast: true
      max-parallel: 1
    # set the environment to use (environment must exist and be named the same as the stage here)
    # environment:
    #   name: ${{ matrix.stage }}
    steps:
    # use environment specific secrets here for each stage
      - name: Execute task ${{ matrix.task }}
        run: |
          echo "Perform job executing task ${{ matrix.task }}"
          sleep 15